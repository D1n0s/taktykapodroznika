{
  "version": 3,
  "sources": ["../../leaflet-control-geocoder/src/geocoders/api.ts", "../../leaflet-control-geocoder/src/util.ts", "../../leaflet-control-geocoder/src/geocoders/arcgis.ts", "../../leaflet-control-geocoder/src/geocoders/bing.ts", "../../leaflet-control-geocoder/src/geocoders/google.ts", "../../leaflet-control-geocoder/src/geocoders/here.ts", "../../leaflet-control-geocoder/src/geocoders/latlng.ts", "../../leaflet-control-geocoder/src/geocoders/mapbox.ts", "../../leaflet-control-geocoder/src/geocoders/mapquest.ts", "../../leaflet-control-geocoder/src/geocoders/neutrino.ts", "../../leaflet-control-geocoder/src/geocoders/nominatim.ts", "../../leaflet-control-geocoder/src/geocoders/open-location-code.ts", "../../leaflet-control-geocoder/src/geocoders/opencage.ts", "../../leaflet-control-geocoder/src/geocoders/pelias.ts", "../../leaflet-control-geocoder/src/geocoders/photon.ts", "../../leaflet-control-geocoder/src/geocoders/what3words.ts", "../../leaflet-control-geocoder/src/control.ts", "../../leaflet-control-geocoder/src/index.ts"],
  "sourcesContent": ["import * as L from 'leaflet';\n\n/**\n * An object that represents a result from a geocoding query\n */\nexport interface GeocodingResult {\n  /**\n   * Name of found location\n   */\n  name: string;\n  /**\n   * The bounds of the location\n   */\n  bbox: L.LatLngBounds;\n  /**\n   * The center coordinate of the location\n   */\n  center: L.LatLng;\n  /**\n   * URL for icon representing result; optional\n   */\n  icon?: string;\n  /**\n   * HTML formatted representation of the name\n   */\n  html?: string;\n  /**\n   * Additional properties returned by the geocoder\n   */\n  properties?: any;\n}\n\n/**\n * A callback function used in {@link IGeocoder.geocode} and {@link IGeocoder.suggest} and {@link IGeocoder.reverse}\n */\nexport type GeocodingCallback = (result: GeocodingResult[]) => void;\n\n/**\n * An interface implemented to respond to geocoding queries\n */\nexport interface IGeocoder {\n  /**\n   * Performs a geocoding query and returns the results to the callback in the provided context\n   * @param query the query\n   * @param cb the callback function\n   * @param context the `this` context in the callback\n   */\n  geocode(query: string, cb: GeocodingCallback, context?: any): void;\n  /**\n   * Performs a geocoding query suggestion (this happens while typing) and returns the results to the callback in the provided context\n   * @param query the query\n   * @param cb the callback function\n   * @param context the `this` context in the callback\n   */\n  suggest?(query: string, cb: GeocodingCallback, context?: any): void;\n  /**\n   * Performs a reverse geocoding query and returns the results to the callback in the provided context\n   * @param location the coordinate to reverse geocode\n   * @param scale the map scale possibly used for reverse geocoding\n   * @param cb the callback function\n   * @param context the `this` context in the callback\n   */\n  reverse?(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void;\n}\n\nexport interface GeocoderOptions {\n  /**\n   * URL of the service\n   */\n  serviceUrl: string;\n  /**\n   * Additional URL parameters (strings) that will be added to geocoding requests\n   */\n  geocodingQueryParams?: Record<string, unknown>;\n  /**\n   * Additional URL parameters (strings) that will be added to reverse geocoding requests\n   */\n  reverseQueryParams?: Record<string, unknown>;\n  /**\n   * API key to use this service\n   */\n  apiKey?: string;\n}\n\n/**\n * @internal\n */\nexport function geocodingParams(\n  options: GeocoderOptions,\n  params: Record<string, unknown>\n): Record<string, unknown> {\n  return L.Util.extend(params, options.geocodingQueryParams);\n}\n\n/**\n * @internal\n */\nexport function reverseParams(\n  options: GeocoderOptions,\n  params: Record<string, unknown>\n): Record<string, unknown> {\n  return L.Util.extend(params, options.reverseQueryParams);\n}\n", "import * as L from 'leaflet';\n/**\n * @internal\n */\nlet lastCallbackId = 0;\n\n// Adapted from handlebars.js\n// https://github.com/wycats/handlebars.js/\n/**\n * @internal\n */\nconst badChars = /[&<>\"'`]/g;\n/**\n * @internal\n */\nconst possible = /[&<>\"'`]/;\n/**\n * @internal\n */\nconst escape: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n\n/**\n * @internal\n */\nfunction escapeChar(chr: string) {\n  return escape[chr];\n}\n\n/**\n * @internal\n */\nexport function htmlEscape(string?: string): string {\n  if (string == null) {\n    return '';\n  } else if (!string) {\n    return string + '';\n  }\n\n  // Force a string conversion as this will be done by the append regardless and\n  // the regex test will do this transparently behind the scenes, causing issues if\n  // an object's to string has escaped characters in it.\n  string = '' + string;\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\n/**\n * @internal\n */\nexport function jsonp(\n  url: string,\n  params: Record<string, any>,\n  callback: (message: any) => void,\n  context: any,\n  jsonpParam?: string\n) {\n  const callbackId = '_l_geocoder_' + lastCallbackId++;\n  params[jsonpParam || 'callback'] = callbackId;\n  (window as any)[callbackId] = L.Util.bind(callback, context);\n  const script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.src = url + getParamString(params);\n  script.id = callbackId;\n  document.getElementsByTagName('head')[0].appendChild(script);\n}\n\n/**\n * @internal\n */\nexport function getJSON(\n  url: string,\n  params: Record<string, unknown>,\n  callback: (message: any) => void\n): void {\n  const xmlHttp = new XMLHttpRequest();\n  xmlHttp.onreadystatechange = function() {\n    if (xmlHttp.readyState !== 4) {\n      return;\n    }\n    let message;\n    if (xmlHttp.status !== 200 && xmlHttp.status !== 304) {\n      message = '';\n    } else if (typeof xmlHttp.response === 'string') {\n      // IE doesn't parse JSON responses even with responseType: 'json'.\n      try {\n        message = JSON.parse(xmlHttp.response);\n      } catch (e) {\n        // Not a JSON response\n        message = xmlHttp.response;\n      }\n    } else {\n      message = xmlHttp.response;\n    }\n    callback(message);\n  };\n  xmlHttp.open('GET', url + getParamString(params), true);\n  xmlHttp.responseType = 'json';\n  xmlHttp.setRequestHeader('Accept', 'application/json');\n  xmlHttp.send(null);\n}\n\n/**\n * @internal\n */\nexport function template(str: string, data: Record<string, any>): string {\n  return str.replace(/\\{ *([\\w_]+) *\\}/g, (str, key) => {\n    let value = data[key];\n    if (value === undefined) {\n      value = '';\n    } else if (typeof value === 'function') {\n      value = value(data);\n    }\n    return htmlEscape(value);\n  });\n}\n\n/**\n * @internal\n */\nexport function getParamString(\n  obj: Record<string, unknown | unknown[]>,\n  existingUrl?: string,\n  uppercase?: boolean\n): string {\n  const params = [];\n  for (const i in obj) {\n    const key = encodeURIComponent(uppercase ? i.toUpperCase() : i);\n    const value = obj[i];\n    if (!Array.isArray(value)) {\n      params.push(key + '=' + encodeURIComponent(String(value)));\n    } else {\n      for (let j = 0; j < value.length; j++) {\n        params.push(key + '=' + encodeURIComponent(value[j]));\n      }\n    }\n  }\n  return (!existingUrl || existingUrl.indexOf('?') === -1 ? '?' : '&') + params.join('&');\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface ArcGisOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [ArcGIS geocoder](https://developers.arcgis.com/features/geocoding/)\n */\nexport class ArcGis implements IGeocoder {\n  options: ArcGisOptions = {\n    serviceUrl: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer',\n    apiKey: ''\n  };\n\n  constructor(options?: Partial<ArcGisOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      token: this.options.apiKey,\n      SingleLine: query,\n      outFields: 'Addr_Type',\n      forStorage: false,\n      maxLocations: 10,\n      f: 'json'\n    });\n\n    getJSON(this.options.serviceUrl + '/findAddressCandidates', params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.candidates && data.candidates.length) {\n        for (let i = 0; i <= data.candidates.length - 1; i++) {\n          const loc = data.candidates[i];\n          const latLng = L.latLng(loc.location.y, loc.location.x);\n          const latLngBounds = L.latLngBounds(\n            L.latLng(loc.extent.ymax, loc.extent.xmax),\n            L.latLng(loc.extent.ymin, loc.extent.xmin)\n          );\n          results[i] = {\n            name: loc.address,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      location: location.lng + ',' + location.lat,\n      distance: 100,\n      f: 'json'\n    });\n    getJSON(this.options.serviceUrl + '/reverseGeocode', params, data => {\n      const result: GeocodingResult[] = [];\n      if (data && !data.error) {\n        const center = L.latLng(data.location.y, data.location.x);\n        const bbox = L.latLngBounds(center, center);\n        result.push({\n          name: data.address.Match_addr,\n          center: center,\n          bbox: bbox\n        });\n      }\n\n      cb.call(context, result);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link ArcGis}\n * @param options the options\n */\nexport function arcgis(options?: Partial<ArcGisOptions>) {\n  return new ArcGis(options);\n}\n", "import * as L from 'leaflet';\nimport { jsonp } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface BingOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Bing Locations API](https://docs.microsoft.com/en-us/bingmaps/rest-services/locations/)\n */\nexport class Bing implements IGeocoder {\n  options: BingOptions = {\n    serviceUrl: 'https://dev.virtualearth.net/REST/v1/Locations'\n  };\n\n  constructor(options?: Partial<BingOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      query: query,\n      key: this.options.apiKey\n    });\n    jsonp(\n      this.options.apiKey,\n      params,\n      data => {\n        const results: GeocodingResult[] = [];\n        if (data.resourceSets.length > 0) {\n          for (let i = data.resourceSets[0].resources.length - 1; i >= 0; i--) {\n            const resource = data.resourceSets[0].resources[i],\n              bbox = resource.bbox;\n            results[i] = {\n              name: resource.name,\n              bbox: L.latLngBounds([bbox[0], bbox[1]], [bbox[2], bbox[3]]),\n              center: L.latLng(resource.point.coordinates)\n            };\n          }\n        }\n        cb.call(context, results);\n      },\n      this,\n      'jsonp'\n    );\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey\n    });\n    jsonp(\n      this.options.serviceUrl + location.lat + ',' + location.lng,\n      params,\n      data => {\n        const results: GeocodingResult[] = [];\n        for (let i = data.resourceSets[0].resources.length - 1; i >= 0; i--) {\n          const resource = data.resourceSets[0].resources[i],\n            bbox = resource.bbox;\n          results[i] = {\n            name: resource.name,\n            bbox: L.latLngBounds([bbox[0], bbox[1]], [bbox[2], bbox[3]]),\n            center: L.latLng(resource.point.coordinates)\n          };\n        }\n        cb.call(context, results);\n      },\n      this,\n      'jsonp'\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Bing}\n * @param options the options\n */\nexport function bing(options?: Partial<BingOptions>) {\n  return new Bing(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\n/**\n * Implementation of the [Google Geocoding API](https://developers.google.com/maps/documentation/geocoding/)\n */\nexport interface GoogleOptions extends GeocoderOptions {}\n\nexport class Google implements IGeocoder {\n  options: GoogleOptions = {\n    serviceUrl: 'https://maps.googleapis.com/maps/api/geocode/json'\n  };\n\n  constructor(options?: Partial<GoogleOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      address: query\n    });\n    getJSON(this.options.serviceUrl, params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.results && data.results.length) {\n        for (let i = 0; i <= data.results.length - 1; i++) {\n          const loc = data.results[i];\n          const latLng = L.latLng(loc.geometry.location);\n          const latLngBounds = L.latLngBounds(\n            L.latLng(loc.geometry.viewport.northeast),\n            L.latLng(loc.geometry.viewport.southwest)\n          );\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      latlng: location.lat + ',' + location.lng\n    });\n    getJSON(this.options.serviceUrl, params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.results && data.results.length) {\n        for (let i = 0; i <= data.results.length - 1; i++) {\n          const loc = data.results[i];\n          const center = L.latLng(loc.geometry.location);\n          const bbox = L.latLngBounds(\n            L.latLng(loc.geometry.viewport.northeast),\n            L.latLng(loc.geometry.viewport.southwest)\n          );\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: bbox,\n            center: center,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Google}\n * @param options the options\n */\nexport function google(options?: Partial<GoogleOptions>) {\n  return new Google(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface HereOptions extends GeocoderOptions {\n  /**\n   * Use `apiKey` and the new `HEREv2` geocoder\n   * @deprecated\n   */\n  app_id: string;\n  /**\n   * Use `apiKey` and the new `HEREv2` geocoder\n   * @deprecated\n   */\n  app_code: string;\n  reverseGeocodeProxRadius?: any;\n  apiKey: string;\n  maxResults: number;\n}\n\n/**\n * Implementation of the [HERE Geocoder API](https://developer.here.com/documentation/geocoder/topics/introduction.html)\n */\nexport class HERE implements IGeocoder {\n  options: HereOptions = {\n    serviceUrl: 'https://geocoder.api.here.com/6.2/',\n    app_id: '',\n    app_code: '',\n    apiKey: '',\n    maxResults: 5\n  };\n\n  constructor(options?: Partial<HereOptions>) {\n    L.Util.setOptions(this, options);\n    if (options.apiKey) throw Error('apiKey is not supported, use app_id/app_code instead!');\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      searchtext: query,\n      gen: 9,\n      app_id: this.options.app_id,\n      app_code: this.options.app_code,\n      jsonattributes: 1,\n      maxresults: this.options.maxResults\n    });\n    this.getJSON(this.options.serviceUrl + 'geocode.json', params, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    let prox = location.lat + ',' + location.lng;\n    if (this.options.reverseGeocodeProxRadius) {\n      prox += ',' + this.options.reverseGeocodeProxRadius;\n    }\n    const params = reverseParams(this.options, {\n      prox,\n      mode: 'retrieveAddresses',\n      app_id: this.options.app_id,\n      app_code: this.options.app_code,\n      gen: 9,\n      jsonattributes: 1,\n      maxresults: this.options.maxResults\n    });\n    this.getJSON(this.options.serviceUrl + 'reversegeocode.json', params, cb, context);\n  }\n\n  getJSON(url: string, params: any, cb: GeocodingCallback, context?: any) {\n    getJSON(url, params, data => {\n      const results: GeocodingResult[] = [];\n\n      if (data.response.view && data.response.view.length) {\n        for (let i = 0; i <= data.response.view[0].result.length - 1; i++) {\n          const loc = data.response.view[0].result[i].location;\n          const center = L.latLng(loc.displayPosition.latitude, loc.displayPosition.longitude);\n          const bbox = L.latLngBounds(\n            L.latLng(loc.mapView.topLeft.latitude, loc.mapView.topLeft.longitude),\n            L.latLng(loc.mapView.bottomRight.latitude, loc.mapView.bottomRight.longitude)\n          );\n          results[i] = {\n            name: loc.address.label,\n            properties: loc.address,\n            bbox: bbox,\n            center: center\n          };\n        }\n      }\n      cb.call(context, results);\n    });\n  }\n}\n\n/**\n * Implementation of the new [HERE Geocoder API](https://developer.here.com/documentation/geocoding-search-api/api-reference-swagger.html)\n */\nexport class HEREv2 implements IGeocoder {\n  options: HereOptions = {\n    serviceUrl: 'https://geocode.search.hereapi.com/v1',\n    apiKey: '',\n    app_id: '',\n    app_code: '',\n    maxResults: 10\n  };\n\n  constructor(options?: Partial<HereOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      q: query,\n      apiKey: this.options.apiKey,\n      limit: this.options.maxResults\n    });\n\n    if (!params.at && !params.in) {\n      throw Error(\n        'at / in parameters not found. Please define coordinates (at=latitude,longitude) or other (in) in your geocodingQueryParams.'\n      );\n    }\n\n    this.getJSON(this.options.serviceUrl + '/discover', params, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      at: location.lat + ',' + location.lng,\n      limit: this.options.reverseGeocodeProxRadius,\n      apiKey: this.options.apiKey\n    });\n    this.getJSON(this.options.serviceUrl + '/revgeocode', params, cb, context);\n  }\n\n  getJSON(url: string, params: any, cb: GeocodingCallback, context?: any) {\n    getJSON(url, params, data => {\n      const results: GeocodingResult[] = [];\n\n      if (data.items && data.items.length) {\n        for (let i = 0; i <= data.items.length - 1; i++) {\n          const item = data.items[i];\n          const latLng = L.latLng(item.position.lat, item.position.lng);\n          let bbox: L.LatLngBounds;\n          if (item.mapView) {\n            bbox = L.latLngBounds(\n              L.latLng(item.mapView.south, item.mapView.west),\n              L.latLng(item.mapView.north, item.mapView.east)\n            );\n          } else {\n            // Using only position when not provided\n            bbox = L.latLngBounds(\n              L.latLng(item.position.lat, item.position.lng),\n              L.latLng(item.position.lat, item.position.lng)\n            );\n          }\n          results[i] = {\n            name: item.address.label,\n            properties: item.address,\n            bbox: bbox,\n            center: latLng\n          };\n        }\n      }\n      cb.call(context, results);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link HERE}\n * @param options the options\n */\nexport function here(options?: Partial<HereOptions>) {\n  if (options.apiKey) {\n    return new HEREv2(options);\n  } else {\n    return new HERE(options);\n  }\n}\n", "import * as L from 'leaflet';\nimport { IGeocoder, GeocodingCallback, GeocodingResult } from './api';\n\nexport interface LatLngOptions {\n  /**\n   * The next geocoder to use for non-supported queries\n   */\n  next?: IGeocoder;\n  /**\n   * The size in meters used for passing to `LatLng.toBounds`\n   */\n  sizeInMeters: number;\n}\n\n/**\n * Parses basic latitude/longitude strings such as `'50.06773 14.37742'`, `'N50.06773 W14.37742'`, `'S 50° 04.064 E 014° 22.645'`, or `'S 50° 4′ 03.828″, W 14° 22′ 38.712″'`\n * @param query the latitude/longitude string to parse\n * @returns the parsed latitude/longitude\n */\nexport function parseLatLng(query: string): L.LatLng | undefined {\n  let match;\n  // regex from https://github.com/openstreetmap/openstreetmap-website/blob/master/app/controllers/geocoder_controller.rb\n  if ((match = query.match(/^([NS])\\s*(\\d{1,3}(?:\\.\\d*)?)\\W*([EW])\\s*(\\d{1,3}(?:\\.\\d*)?)$/))) {\n    // [NSEW] decimal degrees\n    return L.latLng(\n      (/N/i.test(match[1]) ? 1 : -1) * +match[2],\n      (/E/i.test(match[3]) ? 1 : -1) * +match[4]\n    );\n  } else if (\n    (match = query.match(/^(\\d{1,3}(?:\\.\\d*)?)\\s*([NS])\\W*(\\d{1,3}(?:\\.\\d*)?)\\s*([EW])$/))\n  ) {\n    // decimal degrees [NSEW]\n    return L.latLng(\n      (/N/i.test(match[2]) ? 1 : -1) * +match[1],\n      (/E/i.test(match[4]) ? 1 : -1) * +match[3]\n    );\n  } else if (\n    (match = query.match(\n      /^([NS])\\s*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\W*([EW])\\s*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?$/\n    ))\n  ) {\n    // [NSEW] degrees, decimal minutes\n    return L.latLng(\n      (/N/i.test(match[1]) ? 1 : -1) * (+match[2] + +match[3] / 60),\n      (/E/i.test(match[4]) ? 1 : -1) * (+match[5] + +match[6] / 60)\n    );\n  } else if (\n    (match = query.match(\n      /^(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\s*([NS])\\W*(\\d{1,3})°?\\s*(\\d{1,3}(?:\\.\\d*)?)?['′]?\\s*([EW])$/\n    ))\n  ) {\n    // degrees, decimal minutes [NSEW]\n    return L.latLng(\n      (/N/i.test(match[3]) ? 1 : -1) * (+match[1] + +match[2] / 60),\n      (/E/i.test(match[6]) ? 1 : -1) * (+match[4] + +match[5] / 60)\n    );\n  } else if (\n    (match = query.match(\n      /^([NS])\\s*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?\\W*([EW])\\s*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?$/\n    ))\n  ) {\n    // [NSEW] degrees, minutes, decimal seconds\n    return L.latLng(\n      (/N/i.test(match[1]) ? 1 : -1) * (+match[2] + +match[3] / 60 + +match[4] / 3600),\n      (/E/i.test(match[5]) ? 1 : -1) * (+match[6] + +match[7] / 60 + +match[8] / 3600)\n    );\n  } else if (\n    (match = query.match(\n      /^(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]\\s*([NS])\\W*(\\d{1,3})°?\\s*(\\d{1,2})['′]?\\s*(\\d{1,3}(?:\\.\\d*)?)?[\"″]?\\s*([EW])$/\n    ))\n  ) {\n    // degrees, minutes, decimal seconds [NSEW]\n    return L.latLng(\n      (/N/i.test(match[4]) ? 1 : -1) * (+match[1] + +match[2] / 60 + +match[3] / 3600),\n      (/E/i.test(match[8]) ? 1 : -1) * (+match[5] + +match[6] / 60 + +match[7] / 3600)\n    );\n  } else if ((match = query.match(/^\\s*([+-]?\\d+(?:\\.\\d*)?)\\s*[\\s,]\\s*([+-]?\\d+(?:\\.\\d*)?)\\s*$/))) {\n    return L.latLng(+match[1], +match[2]);\n  }\n}\n\n/**\n * Parses basic latitude/longitude strings such as `'50.06773 14.37742'`, `'N50.06773 W14.37742'`, `'S 50° 04.064 E 014° 22.645'`, or `'S 50° 4′ 03.828″, W 14° 22′ 38.712″'`\n */\nexport class LatLng implements IGeocoder {\n  options: LatLngOptions = {\n    next: undefined,\n    sizeInMeters: 10000\n  };\n\n  constructor(options?: Partial<LatLngOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any) {\n    const center = parseLatLng(query);\n    if (center) {\n      const results: GeocodingResult[] = [\n        {\n          name: query,\n          center: center,\n          bbox: center.toBounds(this.options.sizeInMeters)\n        }\n      ];\n      cb.call(context, results);\n    } else if (this.options.next) {\n      this.options.next.geocode(query, cb, context);\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link LatLng}\n * @param options the options\n */\nexport function latLng(options?: Partial<LatLngOptions>) {\n  return new LatLng(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface MapboxOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Mapbox Geocoding](https://www.mapbox.com/api-documentation/#geocoding)\n */\nexport class Mapbox implements IGeocoder {\n  options: MapboxOptions = {\n    serviceUrl: 'https://api.mapbox.com/geocoding/v5/mapbox.places/'\n  };\n\n  constructor(options?: Partial<MapboxOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  _getProperties(loc) {\n    const properties = {\n      text: loc.text,\n      address: loc.address\n    };\n\n    for (let j = 0; j < (loc.context || []).length; j++) {\n      const id = loc.context[j].id.split('.')[0];\n      properties[id] = loc.context[j].text;\n\n      // Get country code when available\n      if (loc.context[j].short_code) {\n        properties['countryShortCode'] = loc.context[j].short_code;\n      }\n    }\n    return properties;\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params: any = geocodingParams(this.options, {\n      access_token: this.options.apiKey\n    });\n    if (\n      params.proximity !== undefined &&\n      params.proximity.lat !== undefined &&\n      params.proximity.lng !== undefined\n    ) {\n      params.proximity = params.proximity.lng + ',' + params.proximity.lat;\n    }\n    getJSON(this.options.serviceUrl + encodeURIComponent(query) + '.json', params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.features && data.features.length) {\n        for (let i = 0; i <= data.features.length - 1; i++) {\n          const loc = data.features[i];\n          const center = L.latLng(loc.center.reverse());\n          let bbox: L.LatLngBounds;\n          if (loc.bbox) {\n            bbox = L.latLngBounds(\n              L.latLng(loc.bbox.slice(0, 2).reverse()),\n              L.latLng(loc.bbox.slice(2, 4).reverse())\n            );\n          } else {\n            bbox = L.latLngBounds(center, center);\n          }\n\n          results[i] = {\n            name: loc.place_name,\n            bbox: bbox,\n            center: center,\n            properties: this._getProperties(loc)\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const url = this.options.serviceUrl + location.lng + ',' + location.lat + '.json';\n    const param = reverseParams(this.options, {\n      access_token: this.options.apiKey\n    });\n    getJSON(url, param, data => {\n      const results: GeocodingResult[] = [];\n      if (data.features && data.features.length) {\n        for (let i = 0; i <= data.features.length - 1; i++) {\n          const loc = data.features[i];\n          const center = L.latLng(loc.center.reverse());\n          let bbox: L.LatLngBounds;\n          if (loc.bbox) {\n            bbox = L.latLngBounds(\n              L.latLng(loc.bbox.slice(0, 2).reverse()),\n              L.latLng(loc.bbox.slice(2, 4).reverse())\n            );\n          } else {\n            bbox = L.latLngBounds(center, center);\n          }\n          results[i] = {\n            name: loc.place_name,\n            bbox: bbox,\n            center: center,\n            properties: this._getProperties(loc)\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Mapbox}\n * @param options the options\n */\nexport function mapbox(options?: Partial<MapboxOptions>) {\n  return new Mapbox(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface MapQuestOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [MapQuest Geocoding API](http://developer.mapquest.com/web/products/dev-services/geocoding-ws)\n */\nexport class MapQuest implements IGeocoder {\n  options: MapQuestOptions = {\n    serviceUrl: 'https://www.mapquestapi.com/geocoding/v1'\n  };\n\n  constructor(options?: Partial<MapQuestOptions>) {\n    L.Util.setOptions(this, options);\n    // MapQuest seems to provide URI encoded API keys,\n    // so to avoid encoding them twice, we decode them here\n    this.options.apiKey = decodeURIComponent(this.options.apiKey);\n  }\n\n  _formatName(...parts: string[]) {\n    return parts.filter(s => !!s).join(', ');\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      location: query,\n      limit: 5,\n      outFormat: 'json'\n    });\n    getJSON(\n      this.options.serviceUrl + '/address',\n      params,\n      L.Util.bind(function(data) {\n        const results: GeocodingResult[] = [];\n        if (data.results && data.results[0].locations) {\n          for (let i = data.results[0].locations.length - 1; i >= 0; i--) {\n            const loc = data.results[0].locations[i];\n            const center = L.latLng(loc.latLng);\n            results[i] = {\n              name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n              bbox: L.latLngBounds(center, center),\n              center: center\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }, this)\n    );\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      location: location.lat + ',' + location.lng,\n      outputFormat: 'json'\n    });\n    getJSON(\n      this.options.serviceUrl + '/reverse',\n      params,\n      L.Util.bind(function(data) {\n        const results: GeocodingResult[] = [];\n        if (data.results && data.results[0].locations) {\n          for (let i = data.results[0].locations.length - 1; i >= 0; i--) {\n            const loc = data.results[0].locations[i];\n            const center = L.latLng(loc.latLng);\n            results[i] = {\n              name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n              bbox: L.latLngBounds(center, center),\n              center: center\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }, this)\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link MapQuest}\n * @param options the options\n */\nexport function mapQuest(options?: Partial<MapQuestOptions>) {\n  return new MapQuest(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface NeutrinoOptions extends GeocoderOptions {\n  userId: string;\n}\n\n/**\n * Implementation of the [Neutrino API](https://www.neutrinoapi.com/api/geocode-address/)\n */\nexport class Neutrino implements IGeocoder {\n  options: NeutrinoOptions = {\n    userId: undefined,\n    apiKey: undefined,\n    serviceUrl: 'https://neutrinoapi.com/'\n  };\n\n  constructor(options?: Partial<NeutrinoOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  // https://www.neutrinoapi.com/api/geocode-address/\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      //get three words and make a dot based string\n      address: query.split(/\\s+/).join('.')\n    });\n    getJSON(this.options.serviceUrl + 'geocode-address', params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.locations) {\n        data.geometry = data.locations[0];\n        const center = L.latLng(data.geometry['latitude'], data.geometry['longitude']);\n        const bbox = L.latLngBounds(center, center);\n        results[0] = {\n          name: data.geometry.address,\n          bbox: bbox,\n          center: center\n        };\n      }\n\n      cb.call(context, results);\n    });\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  // https://www.neutrinoapi.com/api/geocode-reverse/\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      latitude: location.lat,\n      longitude: location.lng\n    });\n    getJSON(this.options.serviceUrl + 'geocode-reverse', params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.status.status == 200 && data.found) {\n        const center = L.latLng(location.lat, location.lng);\n        const bbox = L.latLngBounds(center, center);\n        results[0] = {\n          name: data.address,\n          bbox: bbox,\n          center: center\n        };\n      }\n      cb.call(context, results);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Neutrino}\n * @param options the options\n */\nexport function neutrino(options?: Partial<NeutrinoOptions>) {\n  return new Neutrino(options);\n}\n", "import * as L from 'leaflet';\nimport { template, getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface NominatimResult {\n  place_id: number;\n  licence: string;\n  osm_type: string;\n  osm_id: number;\n  boundingbox: string[];\n  lat: string;\n  lon: string;\n  display_name: string;\n  class: string;\n  type: string;\n  importance: number;\n  icon?: string;\n  address: NominatimAddress;\n}\n\nexport interface NominatimAddress {\n  building?: string;\n  city_district?: string;\n  city?: string;\n  country_code?: string;\n  country?: string;\n  county?: string;\n  hamlet?: string;\n  house_number?: string;\n  neighbourhood?: string;\n  postcode?: string;\n  road?: string;\n  state_district?: string;\n  state?: string;\n  suburb?: string;\n  village?: string;\n}\n\nexport interface NominatimOptions extends GeocoderOptions {\n  /**\n   * Additional URL parameters (strings) that will be added to geocoding requests; can be used to restrict results to a specific country for example, by providing the [`countrycodes`](https://wiki.openstreetmap.org/wiki/Nominatim#Parameters) parameter to Nominatim\n   */\n  geocodingQueryParams?: Record<string, unknown>;\n  /**\n   * A function that takes an GeocodingResult as argument and returns an HTML formatted string that represents the result. Default function breaks up address in parts from most to least specific, in attempt to increase readability compared to Nominatim's naming\n   */\n  htmlTemplate: (r: NominatimResult) => string;\n}\n\n/**\n * Implementation of the [Nominatim](https://wiki.openstreetmap.org/wiki/Nominatim) geocoder.\n *\n * This is the default geocoding service used by the control, unless otherwise specified in the options.\n *\n * Unless using your own Nominatim installation, please refer to the [Nominatim usage policy](https://operations.osmfoundation.org/policies/nominatim/).\n */\nexport class Nominatim implements IGeocoder {\n  options: NominatimOptions = {\n    serviceUrl: 'https://nominatim.openstreetmap.org/',\n    htmlTemplate: function(r: NominatimResult) {\n      const address = r.address;\n      let className: string;\n      const parts = [];\n      if (address.road || address.building) {\n        parts.push('{building} {road} {house_number}');\n      }\n\n      if (address.city || (address as any).town || address.village || address.hamlet) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-detail' : '';\n        parts.push(\n          '<span class=\"' + className + '\">{postcode} {city} {town} {village} {hamlet}</span>'\n        );\n      }\n\n      if (address.state || address.country) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-context' : '';\n        parts.push('<span class=\"' + className + '\">{state} {country}</span>');\n      }\n\n      return template(parts.join('<br/>'), address);\n    }\n  };\n\n  constructor(options?: Partial<NominatimOptions>) {\n    L.Util.setOptions(this, options || {});\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any) {\n    const params = geocodingParams(this.options, {\n      q: query,\n      limit: 5,\n      format: 'json',\n      addressdetails: 1\n    });\n    getJSON(this.options.serviceUrl + 'search', params, data => {\n      const results: GeocodingResult[] = [];\n      for (let i = data.length - 1; i >= 0; i--) {\n        const bbox = data[i].boundingbox;\n        for (let j = 0; j < 4; j++) bbox[j] = +bbox[j];\n        results[i] = {\n          icon: data[i].icon,\n          name: data[i].display_name,\n          html: this.options.htmlTemplate ? this.options.htmlTemplate(data[i]) : undefined,\n          bbox: L.latLngBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]),\n          center: L.latLng(data[i].lat, data[i].lon),\n          properties: data[i]\n        };\n      }\n      cb.call(context, results);\n    });\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any) {\n    const params = reverseParams(this.options, {\n      lat: location.lat,\n      lon: location.lng,\n      zoom: Math.round(Math.log(scale / 256) / Math.log(2)),\n      addressdetails: 1,\n      format: 'json'\n    });\n    getJSON(this.options.serviceUrl + 'reverse', params, data => {\n      const result: GeocodingResult[] = [];\n      if (data && data.lat && data.lon) {\n        const center = L.latLng(data.lat, data.lon);\n        const bbox = L.latLngBounds(center, center);\n        result.push({\n          name: data.display_name,\n          html: this.options.htmlTemplate ? this.options.htmlTemplate(data) : undefined,\n          center: center,\n          bbox: bbox,\n          properties: data\n        });\n      }\n      cb.call(context, result);\n    });\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Nominatim}\n * @param options the options\n */\nexport function nominatim(options?: Partial<NominatimOptions>) {\n  return new Nominatim(options);\n}\n", "import * as L from 'leaflet';\nimport { IGeocoder, GeocodingCallback, GeocodingResult } from './api';\n\nexport interface OpenLocationCodeOptions {\n  OpenLocationCode: OpenLocationCodeApi;\n  codeLength?: number;\n}\n\nexport interface OpenLocationCodeApi {\n  encode(latitude: number, longitude: number, codeLength?: number): string;\n  decode(code: string): CodeArea;\n}\n\nexport interface CodeArea {\n  latitudeLo: number;\n  longitudeLo: number;\n  latitudeHi: number;\n  longitudeHi: number;\n  latitudeCenter: number;\n  longitudeCenter: number;\n  codeLength: number;\n}\n\n/**\n * Implementation of the [Plus codes](https://plus.codes/) (formerly OpenLocationCode) (requires [open-location-code](https://www.npmjs.com/package/open-location-code))\n */\nexport class OpenLocationCode implements IGeocoder {\n  options: OpenLocationCodeOptions;\n  constructor(options?: Partial<OpenLocationCodeOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any) {\n    try {\n      const decoded = this.options.OpenLocationCode.decode(query);\n      const result: GeocodingResult = {\n        name: query,\n        center: L.latLng(decoded.latitudeCenter, decoded.longitudeCenter),\n        bbox: L.latLngBounds(\n          L.latLng(decoded.latitudeLo, decoded.longitudeLo),\n          L.latLng(decoded.latitudeHi, decoded.longitudeHi)\n        )\n      };\n      cb.call(context, [result]);\n    } catch (e) {\n      console.warn(e); // eslint-disable-line no-console\n      cb.call(context, []);\n    }\n  }\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any) {\n    try {\n      const code = this.options.OpenLocationCode.encode(\n        location.lat,\n        location.lng,\n        this.options.codeLength\n      );\n      const result = {\n        name: code,\n        center: L.latLng(location.lat, location.lng),\n        bbox: L.latLngBounds(\n          L.latLng(location.lat, location.lng),\n          L.latLng(location.lat, location.lng)\n        )\n      };\n      cb.call(context, [result]);\n    } catch (e) {\n      console.warn(e); // eslint-disable-line no-console\n      cb.call(context, []);\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link OpenLocationCode}\n * @param options the options\n */\nexport function openLocationCode(options?: Partial<OpenLocationCodeOptions>) {\n  return new OpenLocationCode(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface OpenCageOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [OpenCage Data API](https://opencagedata.com/)\n */\nexport class OpenCage implements IGeocoder {\n  options: OpenCageOptions = {\n    serviceUrl: 'https://api.opencagedata.com/geocode/v1/json'\n  };\n\n  constructor(options?: Partial<OpenCageOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      key: this.options.apiKey,\n      q: query\n    });\n    getJSON(this.options.serviceUrl, params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.results && data.results.length) {\n        for (let i = 0; i < data.results.length; i++) {\n          const loc = data.results[i];\n          const center = L.latLng(loc.geometry);\n          let bbox: L.LatLngBounds;\n          if (loc.annotations && loc.annotations.bounds) {\n            bbox = L.latLngBounds(\n              L.latLng(loc.annotations.bounds.northeast),\n              L.latLng(loc.annotations.bounds.southwest)\n            );\n          } else {\n            bbox = L.latLngBounds(center, center);\n          }\n          results.push({\n            name: loc.formatted,\n            bbox: bbox,\n            center: center\n          });\n        }\n      }\n      cb.call(context, results);\n    });\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      key: this.options.apiKey,\n      q: [location.lat, location.lng].join(',')\n    });\n    getJSON(this.options.serviceUrl, params, data => {\n      const results: GeocodingResult[] = [];\n      if (data.results && data.results.length) {\n        for (let i = 0; i < data.results.length; i++) {\n          const loc = data.results[i];\n          const center = L.latLng(loc.geometry);\n          let bbox: L.LatLngBounds;\n          if (loc.annotations && loc.annotations.bounds) {\n            bbox = L.latLngBounds(\n              L.latLng(loc.annotations.bounds.northeast),\n              L.latLng(loc.annotations.bounds.southwest)\n            );\n          } else {\n            bbox = L.latLngBounds(center, center);\n          }\n          results.push({\n            name: loc.formatted,\n            bbox: bbox,\n            center: center\n          });\n        }\n      }\n      cb.call(context, results);\n    });\n  }\n}\n\nexport function opencage(options?: Partial<OpenCageOptions>) {\n  return new OpenCage(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface PeliasOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the [Pelias](https://pelias.io/), [geocode.earth](https://geocode.earth/) geocoder (formerly Mapzen Search)\n */\nexport class Pelias implements IGeocoder {\n  options: PeliasOptions = {\n    serviceUrl: 'https://api.geocode.earth/v1'\n  };\n\n  private _lastSuggest = 0;\n\n  constructor(options?: Partial<PeliasOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      api_key: this.options.apiKey,\n      text: query\n    });\n    getJSON(this.options.serviceUrl + '/search', params, data => {\n      cb.call(context, this._parseResults(data, 'bbox'));\n    });\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, {\n      api_key: this.options.apiKey,\n      text: query\n    });\n    getJSON(this.options.serviceUrl + '/autocomplete', params, data => {\n      if (data.geocoding.timestamp > this._lastSuggest) {\n        this._lastSuggest = data.geocoding.timestamp;\n        cb.call(context, this._parseResults(data, 'bbox'));\n      }\n    });\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      api_key: this.options.apiKey,\n      'point.lat': location.lat,\n      'point.lon': location.lng\n    });\n    getJSON(this.options.serviceUrl + '/reverse', params, data => {\n      cb.call(context, this._parseResults(data, 'bounds'));\n    });\n  }\n\n  _parseResults(data, bboxname) {\n    const results: GeocodingResult[] = [];\n    L.geoJSON(data, {\n      pointToLayer: function(feature, latlng) {\n        return L.circleMarker(latlng);\n      },\n      onEachFeature: function(feature, layer: any) {\n        const result = {} as GeocodingResult;\n        let bbox;\n        let center;\n\n        if (layer.getBounds) {\n          bbox = layer.getBounds();\n          center = bbox.getCenter();\n        } else if (layer.feature.bbox) {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(\n            L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(0, 2)),\n            L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(2, 4))\n          );\n        } else {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(center, center);\n        }\n\n        result.name = layer.feature.properties.label;\n        result.center = center;\n        result[bboxname] = bbox;\n        result.properties = layer.feature.properties;\n        results.push(result);\n      }\n    });\n    return results;\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Pelias}\n * @param options the options\n */\nexport function pelias(options?: Partial<PeliasOptions>) {\n  return new Pelias(options);\n}\n\nexport const GeocodeEarth = Pelias;\nexport const geocodeEarth = pelias;\n\n/**\n * r.i.p.\n * @deprecated\n */\nexport const Mapzen = Pelias;\n/**\n * r.i.p.\n * @deprecated\n */\nexport const mapzen = pelias;\n\n/**\n * Implementation of the [Openrouteservice](https://openrouteservice.org/dev/#/api-docs/geocode) geocoder\n */\nexport class Openrouteservice extends Pelias {\n  constructor(options?: Partial<PeliasOptions>) {\n    super(\n      L.Util.extend(\n        {\n          serviceUrl: 'https://api.openrouteservice.org/geocode'\n        },\n        options\n      )\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Openrouteservice}\n * @param options the options\n */\nexport function openrouteservice(options?: Partial<PeliasOptions>) {\n  return new Openrouteservice(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface PhotonOptions extends GeocoderOptions {\n  reverseUrl: string;\n  nameProperties: string[];\n  htmlTemplate?: (r: any) => string;\n}\n\n/**\n * Implementation of the [Photon](http://photon.komoot.de/) geocoder\n */\nexport class Photon implements IGeocoder {\n  options: PhotonOptions = {\n    serviceUrl: 'https://photon.komoot.io/api/',\n    reverseUrl: 'https://photon.komoot.io/reverse/',\n    nameProperties: ['name', 'street', 'suburb', 'hamlet', 'town', 'city', 'state', 'country']\n  };\n\n  constructor(options?: Partial<PhotonOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    const params = geocodingParams(this.options, { q: query });\n    getJSON(\n      this.options.serviceUrl,\n      params,\n      L.Util.bind(function(data) {\n        cb.call(context, this._decodeFeatures(data));\n      }, this)\n    );\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  reverse(latLng: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    const params = reverseParams(this.options, {\n      lat: latLng.lat,\n      lon: latLng.lng\n    });\n    getJSON(\n      this.options.reverseUrl,\n      params,\n      L.Util.bind(function(data) {\n        cb.call(context, this._decodeFeatures(data));\n      }, this)\n    );\n  }\n\n  _decodeFeatures(data: GeoJSON.FeatureCollection<GeoJSON.Point>) {\n    const results: GeocodingResult[] = [];\n\n    if (data && data.features) {\n      for (let i = 0; i < data.features.length; i++) {\n        const f = data.features[i];\n        const c = f.geometry.coordinates;\n        const center = L.latLng(c[1], c[0]);\n        const extent = f.properties.extent;\n\n        const bbox = extent\n          ? L.latLngBounds([extent[1], extent[0]], [extent[3], extent[2]])\n          : L.latLngBounds(center, center);\n\n        results.push({\n          name: this._decodeFeatureName(f),\n          html: this.options.htmlTemplate ? this.options.htmlTemplate(f) : undefined,\n          center: center,\n          bbox: bbox,\n          properties: f.properties\n        });\n      }\n    }\n\n    return results;\n  }\n\n  _decodeFeatureName(f: GeoJSON.Feature) {\n    return (this.options.nameProperties || [])\n      .map(p => {\n        return f.properties[p];\n      })\n      .filter(v => {\n        return !!v;\n      })\n      .join(', ');\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link Photon}\n * @param options the options\n */\nexport function photon(options?: Partial<PhotonOptions>) {\n  return new Photon(options);\n}\n", "import * as L from 'leaflet';\nimport { getJSON } from '../util';\nimport {\n  IGeocoder,\n  GeocoderOptions,\n  GeocodingCallback,\n  geocodingParams,\n  GeocodingResult,\n  reverseParams\n} from './api';\n\nexport interface What3WordsOptions extends GeocoderOptions {}\n\n/**\n * Implementation of the What3Words service\n */\nexport class What3Words implements IGeocoder {\n  options: What3WordsOptions = {\n    serviceUrl: 'https://api.what3words.com/v2/'\n  };\n\n  constructor(options: Partial<What3WordsOptions>) {\n    L.Util.setOptions(this, options);\n  }\n\n  geocode(query: string, cb: GeocodingCallback, context?: any): void {\n    //get three words and make a dot based string\n    getJSON(\n      this.options.serviceUrl + 'forward',\n      geocodingParams(this.options, {\n        key: this.options.apiKey,\n        addr: query.split(/\\s+/).join('.')\n      }),\n      data => {\n        const results: GeocodingResult[] = [];\n        if (data.geometry) {\n          const latLng = L.latLng(data.geometry['lat'], data.geometry['lng']);\n          const latLngBounds = L.latLngBounds(latLng, latLng);\n          results[0] = {\n            name: data.words,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n\n        cb.call(context, results);\n      }\n    );\n  }\n\n  suggest(query: string, cb: GeocodingCallback, context?: any): void {\n    return this.geocode(query, cb, context);\n  }\n\n  reverse(location: L.LatLngLiteral, scale: number, cb: GeocodingCallback, context?: any): void {\n    getJSON(\n      this.options.serviceUrl + 'reverse',\n      reverseParams(this.options, {\n        key: this.options.apiKey,\n        coords: [location.lat, location.lng].join(',')\n      }),\n      data => {\n        const results: GeocodingResult[] = [];\n        if (data.status.status == 200) {\n          const center = L.latLng(data.geometry['lat'], data.geometry['lng']);\n          const bbox = L.latLngBounds(center, center);\n          results[0] = {\n            name: data.words,\n            bbox: bbox,\n            center: center\n          };\n        }\n        cb.call(context, results);\n      }\n    );\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link What3Words}\n * @param options the options\n */\nexport function what3words(options: Partial<What3WordsOptions>) {\n  return new What3Words(options);\n}\n", "import * as L from 'leaflet';\nimport { Nominatim } from './geocoders/index';\nimport { IGeocoder, GeocodingResult } from './geocoders/api';\n\nexport interface GeocoderControlOptions extends L.ControlOptions {\n  /**\n   * Collapse control unless hovered/clicked\n   */\n  collapsed: boolean;\n  /**\n   * How to expand a collapsed control: `touch` or `click` or `hover`\n   */\n  expand: 'touch' | 'click' | 'hover';\n  /**\n   * Placeholder text for text input\n   */\n  placeholder: string;\n  /**\n   * Message when no result found / geocoding error occurs\n   */\n  errorMessage: string;\n  /**\n   * Accessibility label for the search icon used by screen readers\n   */\n  iconLabel: string;\n  /**\n   * Object to perform the actual geocoding queries\n   */\n  geocoder?: IGeocoder;\n  /**\n   * Immediately show the unique result without prompting for alternatives\n   */\n  showUniqueResult: boolean;\n  /**\n   * Show icons for geocoding results (if available); supported by Nominatim\n   */\n  showResultIcons: boolean;\n  /**\n   * Minimum number characters before suggest functionality is used (if available from geocoder)\n   */\n  suggestMinLength: number;\n  /**\n   * Number of milliseconds after typing stopped before suggest functionality is used (if available from geocoder)\n   */\n  suggestTimeout: number;\n  /**\n   * Initial query string for text input\n   */\n  query: string;\n  /**\n   * Minimum number of characters in search text before performing a query\n   */\n  queryMinLength: number;\n  /**\n   * Whether to mark a geocoding result on the map by default\n   */\n  defaultMarkGeocode: boolean;\n}\n\n/**\n * Event is fired when selecting a geocode result.\n * By default, the control will center the map on it and place a marker at its location.\n * To remove the control's default handler for marking a result, set {@link GeocoderControlOptions.defaultMarkGeocode} to `false`.\n */\nexport type MarkGeocodeEvent = { geocode: GeocodingResult };\nexport type MarkGeocodeEventHandlerFn = (event: MarkGeocodeEvent) => void;\n\n/**\n * Event is fired before invoking {@link IGeocoder.geocode} (or {@link IGeocoder.suggest}).\n * The event data contains the query string as `input`.\n */\nexport type StartGeocodeEvent = { input: string };\nexport type StartGeocodeEventHandlerFn = (event: StartGeocodeEvent) => void;\n\n/**\n * Event is fired before after receiving results from {@link IGeocoder.geocode} (or {@link IGeocoder.suggest}).\n * The event data contains the query string as `input` and the geocoding `results`.\n */\nexport type FinishGeocodeEvent = { input: string; results: GeocodingResult[] };\nexport type FinishGeocodeEventHandlerFn = (event: FinishGeocodeEvent) => void;\n\ndeclare module 'leaflet' {\n  interface Evented {\n    on(type: 'markgeocode', fn: MarkGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'startgeocode', fn: StartGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'startsuggest', fn: StartGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'finishsuggest', fn: FinishGeocodeEventHandlerFn, context?: any): this;\n    on(type: 'finishgeocode', fn: FinishGeocodeEventHandlerFn, context?: any): this;\n  }\n}\n\n/**\n * Leaflet mixins https://leafletjs.com/reference-1.7.1.html#class-includes\n * for TypeScript https://www.typescriptlang.org/docs/handbook/mixins.html\n * @internal\n */\nclass EventedControl {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(...args: any[]) {\n    // empty\n  }\n}\n\n/**\n * @internal\n */\ninterface EventedControl extends L.Control, L.Evented {}\nL.Util.extend(EventedControl.prototype, L.Control.prototype);\nL.Util.extend(EventedControl.prototype, L.Evented.prototype);\n\n/**\n * This is the geocoder control. It works like any other [Leaflet control](https://leafletjs.com/reference.html#control), and is added to the map.\n */\nexport class GeocoderControl extends EventedControl {\n  options: GeocoderControlOptions = {\n    showUniqueResult: true,\n    showResultIcons: false,\n    collapsed: true,\n    expand: 'touch',\n    position: 'topright',\n    placeholder: 'Search...',\n    errorMessage: 'Nothing found.',\n    iconLabel: 'Initiate a new search',\n    query: '',\n    queryMinLength: 1,\n    suggestMinLength: 3,\n    suggestTimeout: 250,\n    defaultMarkGeocode: true\n  };\n\n  private _alts: HTMLUListElement;\n  private _container: HTMLDivElement;\n  private _errorElement: HTMLDivElement;\n  private _form: HTMLDivElement;\n  private _geocodeMarker: L.Marker;\n  private _input: HTMLInputElement;\n  private _lastGeocode: string;\n  private _map: L.Map;\n  private _preventBlurCollapse: boolean;\n  private _requestCount = 0;\n  private _results: any;\n  private _selection: any;\n  private _suggestTimeout: any;\n\n  /**\n   * Instantiates a geocoder control (to be invoked using `new`)\n   * @param options the options\n   */\n  constructor(options?: Partial<GeocoderControlOptions>) {\n    super(options);\n    L.Util.setOptions(this, options);\n    if (!this.options.geocoder) {\n      this.options.geocoder = new Nominatim();\n    }\n  }\n\n  addThrobberClass() {\n    L.DomUtil.addClass(this._container, 'leaflet-control-geocoder-throbber');\n  }\n\n  removeThrobberClass() {\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-throbber');\n  }\n\n  /**\n   * Returns the container DOM element for the control and add listeners on relevant map events.\n   * @param map the map instance\n   * @see https://leafletjs.com/reference.html#control-onadd\n   */\n  onAdd(map: L.Map) {\n    const className = 'leaflet-control-geocoder';\n    const container = L.DomUtil.create('div', className + ' leaflet-bar') as HTMLDivElement;\n    const icon = L.DomUtil.create('button', className + '-icon', container) as HTMLButtonElement;\n    const form = (this._form = L.DomUtil.create(\n      'div',\n      className + '-form',\n      container\n    ) as HTMLDivElement);\n\n    this._map = map;\n    this._container = container;\n\n    icon.innerHTML = '&nbsp;';\n    icon.type = 'button';\n    icon.setAttribute('aria-label', this.options.iconLabel);\n\n    const input = (this._input = L.DomUtil.create('input', '', form) as HTMLInputElement);\n    input.type = 'text';\n    input.value = this.options.query;\n    input.placeholder = this.options.placeholder;\n    L.DomEvent.disableClickPropagation(input);\n\n    this._errorElement = L.DomUtil.create(\n      'div',\n      className + '-form-no-error',\n      container\n    ) as HTMLDivElement;\n    this._errorElement.innerHTML = this.options.errorMessage;\n\n    this._alts = L.DomUtil.create(\n      'ul',\n      className + '-alternatives leaflet-control-geocoder-alternatives-minimized',\n      container\n    ) as HTMLUListElement;\n    L.DomEvent.disableClickPropagation(this._alts);\n\n    L.DomEvent.addListener(input, 'keydown', this._keydown, this);\n    if (this.options.geocoder.suggest) {\n      L.DomEvent.addListener(input, 'input', this._change, this);\n    }\n    L.DomEvent.addListener(input, 'blur', () => {\n      if (this.options.collapsed && !this._preventBlurCollapse) {\n        this._collapse();\n      }\n      this._preventBlurCollapse = false;\n    });\n\n    if (this.options.collapsed) {\n      if (this.options.expand === 'click') {\n        L.DomEvent.addListener(container, 'click', (e: Event) => {\n          if ((e as MouseEvent).button === 0 && (e as MouseEvent).detail !== 2) {\n            this._toggle();\n          }\n        });\n      } else if (this.options.expand === 'touch') {\n        L.DomEvent.addListener(\n          container,\n          L.Browser.touch ? 'touchstart mousedown' : 'mousedown',\n          (e: Event) => {\n            this._toggle();\n            e.preventDefault(); // mobile: clicking focuses the icon, so UI expands and immediately collapses\n            e.stopPropagation();\n          },\n          this\n        );\n      } else {\n        L.DomEvent.addListener(container, 'mouseover', this._expand, this);\n        L.DomEvent.addListener(container, 'mouseout', this._collapse, this);\n        this._map.on('movestart', this._collapse, this);\n      }\n    } else {\n      this._expand();\n      if (L.Browser.touch) {\n        L.DomEvent.addListener(container, 'touchstart', () => this._geocode());\n      } else {\n        L.DomEvent.addListener(container, 'click', () => this._geocode());\n      }\n    }\n\n    if (this.options.defaultMarkGeocode) {\n      this.on('markgeocode', this.markGeocode, this);\n    }\n\n    this.on('startgeocode', this.addThrobberClass, this);\n    this.on('finishgeocode', this.removeThrobberClass, this);\n    this.on('startsuggest', this.addThrobberClass, this);\n    this.on('finishsuggest', this.removeThrobberClass, this);\n\n    L.DomEvent.disableClickPropagation(container);\n\n    return container;\n  }\n\n  /**\n   * Sets the query string on the text input\n   * @param string the query string\n   */\n  setQuery(string: string): this {\n    this._input.value = string;\n    return this;\n  }\n\n  private _geocodeResult(results: GeocodingResult[], suggest: boolean) {\n    if (!suggest && this.options.showUniqueResult && results.length === 1) {\n      this._geocodeResultSelected(results[0]);\n    } else if (results.length > 0) {\n      this._alts.innerHTML = '';\n      this._results = results;\n      L.DomUtil.removeClass(this._alts, 'leaflet-control-geocoder-alternatives-minimized');\n      L.DomUtil.addClass(this._container, 'leaflet-control-geocoder-options-open');\n      for (let i = 0; i < results.length; i++) {\n        this._alts.appendChild(this._createAlt(results[i], i));\n      }\n    } else {\n      L.DomUtil.addClass(this._container, 'leaflet-control-geocoder-options-error');\n      L.DomUtil.addClass(this._errorElement, 'leaflet-control-geocoder-error');\n    }\n  }\n\n  /**\n   * Marks a geocoding result on the map\n   * @param result the geocoding result\n   */\n  markGeocode(event: MarkGeocodeEvent) {\n    const result = event.geocode;\n\n    this._map.fitBounds(result.bbox);\n\n    if (this._geocodeMarker) {\n      this._map.removeLayer(this._geocodeMarker);\n    }\n\n    this._geocodeMarker = new L.Marker(result.center)\n      .bindPopup(result.html || result.name)\n      .addTo(this._map)\n      .openPopup();\n\n    return this;\n  }\n\n  private _geocode(suggest?: boolean) {\n    const value = this._input.value;\n    if (!suggest && value.length < this.options.queryMinLength) {\n      return;\n    }\n\n    const requestCount = ++this._requestCount;\n    const cb = (results: GeocodingResult[]) => {\n      if (requestCount === this._requestCount) {\n        const event: FinishGeocodeEvent = { input: value, results };\n        this.fire(suggest ? 'finishsuggest' : 'finishgeocode', event);\n        this._geocodeResult(results, suggest);\n      }\n    };\n\n    this._lastGeocode = value;\n    if (!suggest) {\n      this._clearResults();\n    }\n\n    const event: StartGeocodeEvent = { input: value };\n    this.fire(suggest ? 'startsuggest' : 'startgeocode', event);\n    if (suggest) {\n      this.options.geocoder.suggest(value, cb);\n    } else {\n      this.options.geocoder.geocode(value, cb);\n    }\n  }\n\n  private _geocodeResultSelected(geocode: GeocodingResult) {\n    const event: MarkGeocodeEvent = { geocode };\n    this.fire('markgeocode', event);\n  }\n\n  private _toggle() {\n    if (L.DomUtil.hasClass(this._container, 'leaflet-control-geocoder-expanded')) {\n      this._collapse();\n    } else {\n      this._expand();\n    }\n  }\n\n  private _expand() {\n    L.DomUtil.addClass(this._container, 'leaflet-control-geocoder-expanded');\n    this._input.select();\n    this.fire('expand');\n  }\n\n  private _collapse() {\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-expanded');\n    L.DomUtil.addClass(this._alts, 'leaflet-control-geocoder-alternatives-minimized');\n    L.DomUtil.removeClass(this._errorElement, 'leaflet-control-geocoder-error');\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-options-open');\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-options-error');\n    this._input.blur(); // mobile: keyboard shouldn't stay expanded\n    this.fire('collapse');\n  }\n\n  private _clearResults() {\n    L.DomUtil.addClass(this._alts, 'leaflet-control-geocoder-alternatives-minimized');\n    this._selection = null;\n    L.DomUtil.removeClass(this._errorElement, 'leaflet-control-geocoder-error');\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-options-open');\n    L.DomUtil.removeClass(this._container, 'leaflet-control-geocoder-options-error');\n  }\n\n  private _createAlt(result: GeocodingResult, index: number) {\n    const li = L.DomUtil.create('li', ''),\n      a = L.DomUtil.create('a', '', li),\n      icon =\n        this.options.showResultIcons && result.icon\n          ? (L.DomUtil.create('img', '', a) as HTMLImageElement)\n          : null,\n      text = result.html ? undefined : document.createTextNode(result.name),\n      mouseDownHandler = (e: Event) => {\n        // In some browsers, a click will fire on the map if the control is\n        // collapsed directly after mousedown. To work around this, we\n        // wait until the click is completed, and _then_ collapse the\n        // control. Messy, but this is the workaround I could come up with\n        // for #142.\n        this._preventBlurCollapse = true;\n        L.DomEvent.stop(e);\n        this._geocodeResultSelected(result);\n        L.DomEvent.on(li, 'click touchend', () => {\n          if (this.options.collapsed) {\n            this._collapse();\n          } else {\n            this._clearResults();\n          }\n        });\n      };\n\n    if (icon) {\n      icon.src = result.icon;\n    }\n\n    li.setAttribute('data-result-index', String(index));\n\n    if (result.html) {\n      a.innerHTML = a.innerHTML + result.html;\n    } else if (text) {\n      a.appendChild(text);\n    }\n\n    // Use mousedown and not click, since click will fire _after_ blur,\n    // causing the control to have collapsed and removed the items\n    // before the click can fire.\n    L.DomEvent.addListener(li, 'mousedown touchstart', mouseDownHandler, this);\n\n    return li;\n  }\n\n  private _keydown(e: KeyboardEvent) {\n    const select = (dir: number) => {\n      if (this._selection) {\n        L.DomUtil.removeClass(this._selection, 'leaflet-control-geocoder-selected');\n        this._selection = this._selection[dir > 0 ? 'nextSibling' : 'previousSibling'];\n      }\n      if (!this._selection) {\n        this._selection = this._alts[dir > 0 ? 'firstChild' : 'lastChild'];\n      }\n\n      if (this._selection) {\n        L.DomUtil.addClass(this._selection, 'leaflet-control-geocoder-selected');\n      }\n    };\n\n    switch (e.keyCode) {\n      // Escape\n      case 27:\n        if (this.options.collapsed) {\n          this._collapse();\n        } else {\n          this._clearResults();\n        }\n        break;\n      // Up\n      case 38:\n        select(-1);\n        break;\n      // Up\n      case 40:\n        select(1);\n        break;\n      // Enter\n      case 13:\n        if (this._selection) {\n          const index = parseInt(this._selection.getAttribute('data-result-index'), 10);\n          this._geocodeResultSelected(this._results[index]);\n          this._clearResults();\n        } else {\n          this._geocode();\n        }\n        break;\n      default:\n        return;\n    }\n\n    L.DomEvent.preventDefault(e);\n  }\n\n  private _change() {\n    const v = this._input.value;\n    if (v !== this._lastGeocode) {\n      clearTimeout(this._suggestTimeout);\n      if (v.length >= this.options.suggestMinLength) {\n        this._suggestTimeout = setTimeout(() => this._geocode(true), this.options.suggestTimeout);\n      } else {\n        this._clearResults();\n      }\n    }\n  }\n}\n\n/**\n * [Class factory method](https://leafletjs.com/reference.html#class-class-factories) for {@link GeocoderControl}\n * @param options the options\n */\nexport function geocoder(options?: Partial<GeocoderControlOptions>) {\n  return new GeocoderControl(options);\n}\n", "/* @preserve\n * Leaflet Control Geocoder\n * https://github.com/perliedman/leaflet-control-geocoder\n *\n * Copyright (c) 2012 sa3m (https://github.com/sa3m)\n * Copyright (c) 2018 Per Liedman\n * All rights reserved.\n */\nimport * as L from 'leaflet';\nimport { GeocoderControl as Geocoder, geocoder } from './control';\nimport * as geocoders from './geocoders/index';\n\nL.Util.extend(Geocoder, geocoders);\nexport default Geocoder;\nexport { Geocoder, geocoder, geocoders };\n\nL.Util.extend(L.Control, {\n  Geocoder: Geocoder,\n  geocoder: geocoder\n});\n"],
  "mappings": "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",
  "names": ["geocodingParams", "options", "params", "Util", "extend", "geocodingQueryParams", "reverseParams", "reverseQueryParams", "lastCallbackId", "badChars", "possible", "escape", "escapeChar", "chr", "htmlEscape", "string", "test", "replace", "jsonp", "url", "callback", "context", "jsonpParam", "callbackId", "window", "bind", "script", "document", "createElement", "type", "src", "getParamString", "id", "getElementsByTagName", "appendChild", "getJSON", "xmlHttp", "XMLHttpRequest", "onreadystatechange", "readyState", "message", "status", "response", "JSON", "parse", "e", "open", "responseType", "setRequestHeader", "send", "template", "str", "data", "key", "value", "undefined", "obj", "existingUrl", "uppercase", "i", "encodeURIComponent", "toUpperCase", "Array", "isArray", "push", "String", "j", "length", "indexOf", "join", "ArcGis", "constructor", "serviceUrl", "apiKey", "L", "setOptions", "geocode", "query", "cb", "token", "SingleLine", "outFields", "forStorage", "maxLocations", "f", "results", "candidates", "loc", "latLng", "location", "y", "x", "latLngBounds", "extent", "ymax", "xmax", "ymin", "xmin", "name", "address", "bbox", "center", "call", "suggest", "reverse", "scale", "lng", "lat", "distance", "result", "error", "Match_addr", "arcgis", "Bing", "resourceSets", "resources", "resource", "point", "coordinates", "bing", "Google", "geometry", "viewport", "northeast", "southwest", "formatted_address", "properties", "address_components", "latlng", "google", "HERE", "app_id", "app_code", "maxResults", "Error", "searchtext", "gen", "jsonattributes", "maxresults", "prox", "reverseGeocodeProxRadius", "mode", "view", "displayPosition", "latitude", "longitude", "mapView", "topLeft", "bottomRight", "label", "HEREv2", "q", "limit", "at", "in", "items", "item", "position", "south", "west", "north", "east", "here", "parseLatLng", "match", "LatLng", "next", "sizeInMeters", "toBounds", "Mapbox", "_getProperties", "text", "split", "short_code", "access_token", "proximity", "features", "slice", "place_name", "param", "mapbox", "MapQuest", "decodeURIComponent", "_formatName", "parts", "filter", "s", "outFormat", "locations", "street", "adminArea4", "adminArea3", "adminArea1", "outputFormat", "mapQuest", "Neutrino", "userId", "found", "neutrino", "Nominatim", "htmlTemplate", "r", "className", "road", "building", "city", "town", "village", "hamlet", "state", "country", "format", "addressdetails", "boundingbox", "icon", "display_name", "html", "lon", "zoom", "Math", "round", "log", "nominatim", "OpenLocationCode", "decoded", "decode", "latitudeCenter", "longitudeCenter", "latitudeLo", "longitudeLo", "latitudeHi", "longitudeHi", "console", "warn", "code", "encode", "codeLength", "openLocationCode", "OpenCage", "annotations", "bounds", "formatted", "opencage", "Pelias", "api_key", "_parseResults", "geocoding", "timestamp", "_lastSuggest", "bboxname", "geoJSON", "pointToLayer", "feature", "circleMarker", "onEachFeature", "layer", "getBounds", "getCenter", "getLatLng", "GeoJSON", "coordsToLatLng", "pelias", "GeocodeEarth", "geocodeEarth", "Mapzen", "mapzen", "Openrouteservice", "openrouteservice", "Photon", "reverseUrl", "nameProperties", "_decodeFeatures", "c", "_decodeFeatureName", "map", "p", "v", "photon", "What3Words", "addr", "words", "coords", "what3words", "EventedControl", "args", "prototype", "Control", "Evented", "GeocoderControl", "showUniqueResult", "showResultIcons", "collapsed", "expand", "placeholder", "errorMessage", "iconLabel", "queryMinLength", "suggestMinLength", "suggestTimeout", "defaultMarkGeocode", "geocoder", "addThrobberClass", "DomUtil", "addClass", "_container", "removeThrobberClass", "removeClass", "onAdd", "container", "create", "form", "_form", "_map", "innerHTML", "setAttribute", "input", "_input", "DomEvent", "disableClickPropagation", "_errorElement", "_alts", "addListener", "_keydown", "_change", "_preventBlurCollapse", "_collapse", "button", "detail", "_toggle", "Browser", "touch", "preventDefault", "stopPropagation", "_expand", "on", "_geocode", "markGeocode", "setQuery", "_geocodeResult", "_geocodeResultSelected", "_results", "_createAlt", "event", "fitBounds", "_geocodeMarker", "removeLayer", "Marker", "bindPopup", "addTo", "openPopup", "requestCount", "_requestCount", "fire", "_lastGeocode", "_clearResults", "hasClass", "select", "blur", "_selection", "index", "li", "a", "createTextNode", "mouseDownHandler", "stop", "dir", "keyCode", "parseInt", "getAttribute", "clearTimeout", "_suggestTimeout", "setTimeout", "Geocoder", "geocoders"]
}
